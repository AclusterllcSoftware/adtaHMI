<%- include('header', {currentMenu: 'statistics-hourly', pageTitle: 'Hourly'});
%>

<div class="row mt-2">
  <div class="col-lg-12" style="padding: 0 40px">
    <form>
      <div class="row">
        <div class="col-md-9">
          <div class="form-row" id="alert-div" style="display: none">
            <div class="col-md-12" id="alert-div-area"></div>
          </div>
          <div class="form-row">
            <div class="col-md-4">
              <h5>From</h5>
            </div>
            <div class="col-md-4">
              <h5>To</h5>
            </div>
            <div class="col-md-4"></div>
          </div>
          <div class="form-row">
            <div class="col-md-2">
              <input
                type="text"
                class="form-control"
                id="from_date"
                placeholder="From date"
              />
            </div>
            <div class="col-md-1">
              <select class="form-control" id="from_date_hour"></select>
            </div>
            <div class="col-md-1">
              <select class="form-control" id="from_date_minute"></select>
            </div>
            <div class="col-md-2">
              <input
                type="text"
                class="form-control"
                id="to_date"
                placeholder="To date"
              />
            </div>
            <div class="col-md-1">
              <select class="form-control" id="to_date_hour"></select>
            </div>
            <div class="col-md-1">
              <select class="form-control" id="to_date_minute"></select>
            </div>
            <div class="col-md-2">
              <button
                type="button"
                class="btn btn-primary"
                id="filter_submit_btn2"
              >
                Filter
              </button>
              <input type="hidden" id="start_timestamp2" />
              <input type="hidden" id="end_timestamp2" />
            </div>
            <div class="col-md-2"></div>
          </div>
        </div>
      </div>
    </form>
  </div>
  <div
    class="col-lg-12"
    style="padding: 0 40px; text-align: center"
    id="new-volume-chart"
    style="height: 400px"
  >
    Hourly
  </div>
  <div class="col-lg-12" style="padding: 0 40px; text-align: center">
    <table class="table table-sm table-bordered">
      <thead>
        <tr>
          <th>Date/Time</th>
          <th>Scanner Reads</th>
          <th>Scanner No Reads</th>
          <th>% No Reads</th>
          <th>Good diverts</th>
          <th>Reject Count</th>
          <th>Recirc Count</th>
          <th>% Recirc</th>
        </tr>
      </thead>
      <tbody id="table-hourly"></tbody>
    </table>
  </div>
</div>

<div class="row mt-2"></div>

<%- include('footer', {currentMenu: 'statistics-hourly'}); %>
<script src="js/jquery-bootstrap.js"></script>
<script src="js/daterangepicker/moment.min.js"></script>
<script src="js/datepicker/bootstrap-datepicker.min.js"></script>
<script src="js/jquery.newsTicker.js"></script>
<script src="js/datatables/datatables.js"></script>
<script src="js/jszip.min.js"></script>
<script src="js/nav.js"></script>

<script>
  const Highcharts = require("highcharts/highstock");
  require("highcharts/modules/exporting")(Highcharts);
  require("highcharts/modules/export-data")(Highcharts);
  let scs_info = [],
    end_time = null,
    start_time = null;
  let sc_color_codes = {
    sc0: "#34d399",
    sc1: "#38bdf8",
    sc3: "#fb923c",
    sc4: "#e879f9",
    sc5: "#818cf8",
    sc6: "#c084fc",
    sc7: "#2dd4bf",
    sc8: "#292524",
    sc9: "#facc15",
    sc10: "#a3e635",
    sc12: "#0891b2",
    sc14: "#dc2626",
    sc16: "#c026d3",
    sc17: "#7e22ce",
    sc18: "#a1a1aa",
    sc21: "#fde047",
  };

  function load_hour_minute_dropdowns() {
    let hours_html, minutes_html;
    for (var i = 0; i < 24; i++) {
      let v = i;
      if (i < 10) {
        v = "0" + i;
      }
      hours_html += '<option value="' + v + '">' + v + "</option>";
    }

    for (var i = 0; i < 60; i++) {
      let v = i;
      if (i < 10) {
        v = "0" + i;
      }
      minutes_html += '<option value="' + v + '">' + v + "</option>";
    }

    jQuery("#from_date_hour").html(hours_html);
    jQuery("#from_date_minute").html(minutes_html);
    jQuery("#to_date_hour").html(hours_html);
    jQuery("#to_date_minute").html(minutes_html);
  }
  jQuery(document).ready(function () {
    load_hour_minute_dropdowns();

    jQuery("#filter_submit_btn2").click(function () {
      let date_ok = 1;
      let from_date = jQuery("#from_date").val();
      let from_date_hour = jQuery("#from_date_hour").val();
      let from_date_minute = jQuery("#from_date_minute").val();

      let to_date = jQuery("#to_date").val();
      let to_date_hour = jQuery("#to_date_hour").val();
      let to_date_minute = jQuery("#to_date_minute").val();

      if (from_date.trim().length === 0) {
        date_ok = 0;
      }

      if (to_date.trim().length === 0) {
        date_ok = 0;
      }

      if (date_ok === 0) {
        jQuery("#alert-div-area").empty();
        let alert_div_html =
          '<div class="alert alert-warning alert-dismissible fade show" role="alert">' +
          '<strong id="alert-div-text">Please select dates correctly</strong>' +
          '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
          '<span aria-hidden="true">&times;</span>' +
          "</button>" +
          "</div>";
        jQuery("#alert-div-area").html(alert_div_html);
        jQuery("#alert-div").show();
      } else {
        let from_date_time =
          from_date + " " + from_date_hour + ":" + from_date_minute;
        let to_date_time = to_date + " " + to_date_hour + ":" + to_date_minute;

        var from_timestamp = moment(from_date_time, "M-D-YYYY HH:mm").unix();
        var to_timestamp = moment(to_date_time, "M/D/YYYY HH:mm").unix();
        if (from_timestamp > to_timestamp) {
          jQuery("#alert-div-area").empty();
          let alert_div_html =
            '<div class="alert alert-warning alert-dismissible fade show" role="alert">' +
            '<strong id="alert-div-text">Please select date times correctly</strong>' +
            '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
            '<span aria-hidden="true">&times;</span>' +
            "</button>" +
            "</div>";
          jQuery("#alert-div-area").html(alert_div_html);
          jQuery("#alert-div").show();
        } else {
          start_time = from_timestamp;
          end_time = to_timestamp;
          ipcRenderer.send(
            "sendRequest",
            selected_machine,
            "getStatisticsHourly",
            {
              from_timestamp: start_time,
              to_timestamp: end_time,
            }
          );
        }
      }
    });

    jQuery("#from_date").datepicker({
      autoclose: true,
      format: "mm-dd-yyyy",
    });

    jQuery("#to_date").datepicker({
      autoclose: true,
      format: "mm-dd-yyyy",
    });
    jQuery("#ip_list_dropdown").change(function () {
      selected_machine = jQuery(this).val();

      if (selected_machine !== "") {
        let selected_machine_name = machine_list[selected_machine];
        jQuery("#display_machine_name").text(selected_machine_name);
        ipcRenderer.send("get:views", selected_machine, "statistics-hourly");
      } else {
        jQuery("#display_machine_name").text("Select a machine");
        selected_machine = 0;
      }
    });
  });

  ipcRenderer.on("render:statistics-hourly", function (e, basic_info) {
    Object.values(basic_info["scsInfo"]).forEach((v) => {
      scs_info.push({ ...v, code: "sc" + v.value });
    });
    end_time = moment().unix();
    start_time = moment().subtract(1, "days").unix();
    ipcRenderer.send("sendRequest", selected_machine, "getStatisticsHourly", {
      from_timestamp: start_time,
      to_timestamp: end_time,
    });
  });

  ipcRenderer.on("getStatisticsHourly", function (e, data_result) {
    console.log(data_result);
    let chart_categories = [],
      table_data = [];
    let statistics_result = data_result["statistics"];
    let scs_data = scs_info.map((d) => ({
      ...d,
      total: 0,
      color: sc_color_codes[d.code],
      data: [],
    }));

    for (k in statistics_result) {
      let time_slot = statistics_result[k]["created_at_timestamp"],
        good_diverts = 0,
        reject_counts = 0,
        recirc_count = Number(statistics_result[k]["recirc"]),
        total_read = Number(statistics_result[k]["total_read"]),
        no_read = Number(statistics_result[k]["no_read"]),
        per_no_read =
          total_read > 0
            ? Number(((no_read / total_read) * 100).toFixed(2))
            : 0,
        per_recirc_count =
          total_read > 0
            ? Number(((recirc_count / total_read) * 100).toFixed(2))
            : 0;
      chart_categories.push(moment.unix(time_slot).format("MMM D, H:mm"));
      scs_data.forEach((d) => {
        good_diverts +=
          d["code"] === "sc0" ? Number(statistics_result[k][d["code"]]) : 0;
        reject_counts +=
          d["code"] != "sc0"
            ? Number(statistics_result[k][d["code"]]) - recirc_count
            : 0;
        d.total += Number(statistics_result[k][d["code"]]);
        d.data.push(Number(statistics_result[k][d["code"]]));
      });
      table_data.push({
        total_read,
        no_read,
        per_no_read,
        good_diverts,
        reject_counts,
        recirc_count,
        per_recirc_count,
        time_slot: moment.unix(time_slot).format("MMM D, H:mm"),
      });
    }

    scs_data.sort((a, b) => a.total - b.total);
    Highcharts.chart("new-volume-chart", {
      chart: {
        type: "column",
      },
      title: {
        text: "Hourly",
      },
      xAxis: {
        type: "datetime",
        categories: chart_categories,
      },
      yAxis: {
        min: 0,
        title: {
          text: "",
        },
      },
      //   tooltip: {
      //     valueSuffix: title == "Bins Detailed-Total" ? "" : "%",
      //   },
      legend: {
        reversed: true,
      },
      plotOptions: {
        series: {
          stacking: "normal",
          dataLabels: {
            enabled: true,
          },
        },
      },
      series: scs_data.map((d) => ({
        name: d.label,
        data: d.data,
        color: d.color,
      })),
    });

    let table_rows = "";

    table_data.forEach((d) => {
      let sc_rows = "";
      table_rows +=
        "<tr>" +
        "<td>" +
        d.time_slot +
        "</td>" +
        "<td>" +
        d.total_read +
        "</td>" +
        "<td>" +
        d.no_read +
        "</td>" +
        "<td>" +
        d.per_no_read +
        "</td>" +
        "<td>" +
        d.good_diverts +
        "</td>" +
        "<td>" +
        d.reject_counts +
        "</td>" +
        "<td>" +
        d.recirc_count +
        "</td>" +
        "<td>" +
        d.per_recirc_count +
        "</td>" +
        "</tr>";
    });
    jQuery("#table-hourly").empty();
    jQuery("#table-hourly").append(table_rows);
  });
</script>
